#!/usr/bin/env ruby

require 'optparse'
require 'bio-logger'
require 'bio'
require 'bio-commandeer'
require 'set'
require 'tempfile'

SCRIPT_NAME = File.basename(__FILE__); LOG_NAME = SCRIPT_NAME.gsub('.rb','')

COVERAGE_COUNT_TYPE = 'coverage'
COUNT_COUNT_TYPE = 'count'
COUNT_TYPES = [
  COUNT_COUNT_TYPE,
  COVERAGE_COUNT_TYPE
]

# Parse command line options into the options hash
options = {
  :ignore_directions => false,
  :logger => 'stderr',
  :log_level => 'info',
  :count_type => COVERAGE_COUNT_TYPE,
  :forward_read_only => false,
  :accepted_feature_types => ['CDS'],
<<<<<<< HEAD
  :comment_fields_to_print => ['ID'],
=======
  :sam_filter_flags => "-F0x100 -F0x800",
>>>>>>> d6f450a... dirseq: Filter out non-primary and supplementary aligns.
}
o = OptionParser.new do |opts|
  opts.banner = "
    Usage: #{SCRIPT_NAME} <arguments>

    Reports the coverage of a mapping in against each gene given in a GFF file\n\n"

  opts.on("--bam FILE", "path to mapping file [required]") do |arg|
    options[:bam] = arg
  end
  opts.on("--gff FILE", "path to GFF3 file [required]") do |arg|
    options[:gff] = arg
  end
  opts.separator "\nOptional parameters:\n\n"
  opts.on("--forward-read-only", "consider only forward reads (i.e. read1) and ignore reverse reads. [default #{options[:forward_read_only]}]") do
    options[:forward_ready_only] = true
  end
  opts.on("--ignore-directions", "ignore directionality, give overall coverage [default: false i.e. differentiate between directions]") do |arg|
    options[:ignore_directions] = true
  end
  opts.on("--measure-type TYPE", "what to count for each gene [options: #{COUNT_TYPES.join(', ')}][default: #{options[:count_type]}]") do |arg|
    raise "Unexpected count type detected" if not COUNT_TYPES.include?(arg)
    options[:count_type] = arg
  end
  opts.on("--accepted-feature-types TYPE", Array,
          "Print only features of these type(s) [default #{options[:accepted_feature_types].join(',')}]") do |arg|
    options[:accepted_feature_types] = Set.new(arg)
  end
  opts.on("--comment-fields", Array,
          "Print elements from the comments in the GFF file [default #{options[:comment_fields_to_print].join(',')}]") do |arg|
    options[:comment_fields_to_print] = arg
  end
  opts.on("--sam-filter-flags", "Apply these samtools filters [default: #{options[:sam_filter_flags]}]") do |arg|
    options[:sam_filter_flags] = arg
  end

  # logger options
  opts.separator "\nVerbosity:\n\n"
  opts.on("-q", "--quiet", "Run quietly, set logging to ERROR level [default INFO]") {options[:log_level] = 'error'}
  opts.on("--logger filename",String,"Log to file [default #{options[:logger]}]") { |name| options[:logger] = name}
  opts.on("--trace options",String,"Set log level [default INFO]. e.g. '--trace debug' to set logging level to DEBUG"){|s| options[:log_level] = s}
end; o.parse!
if ARGV.length != 0 or options[:bam].nil? or options[:gff].nil?
  $stderr.puts o
  exit 1
end
# Setup logging
Bio::Log::CLI.logger(options[:logger]); Bio::Log::CLI.trace(options[:log_level]); log = Bio::Log::LoggerPlus.new(LOG_NAME); Bio::Log::CLI.configure(LOG_NAME); log.outputters[0].formatter = Log4r::PatternFormatter.new(:pattern => "%5l %c %d: %m", :date_pattern => '%d/%m %T')

gff_file = options[:gff]
bam_file = options[:bam]
accepted_feature_types = options[:accepted_feature_types]

if options[:count_type] != COVERAGE_COUNT_TYPE and options[:ignore_directions]
  raise "ignore_directions + count_type != coverage is currently unsupported"
end


calculate_cov = lambda do |covs, num_covs|
  covs.reduce(:+).to_f / num_covs
end

get_covs = lambda do |cov_lines|
  feature_to_covs = {}
  previous_feature = nil
  covs = []
  num_covs = 0
  cov_lines.each_line do |line|
    splits = line.split("\t")
    break if splits[0] == 'all'

    #gi|169887498|gb|CP000948.1|
    #Prodigal_v2.6.1
    #CDS
    #1047994
    #1049139
    #157.2
    #-
    #0
    #ID=1_972;partial=00;start_type=ATG;rbs_motif=AGGA;rbs_spacer=5-10bp;gc_cont=0.568;conf=100.00;score=157.25;cscore=141.04;sscore=16.20;rscore=10.98;uscore=-0.89;tscore=3.93;
    #70 #coverage
    #2 #num reads with coverage 70
    #96 #coverage
    #0.0208333
    feat = splits[0..8]
    feature_type = feat[2]
    if not accepted_feature_types.include?(feature_type)
      log.debug "Skipping feature as it is of type #{feature_type}"
      next
    end
    if feat != previous_feature
      feature_to_covs[previous_feature] = calculate_cov.call(covs, num_covs) unless previous_feature.nil?
      covs = []
      num_covs = 0
    end
    if splits.length == 13 # -hist
      num = splits[10].to_i
      covs.push num*splits[9].to_i
      num_covs += num
    elsif splits.length == 10 # -count
      covs.push splits[9].to_i
      num_covs += 1
    else
      raise "Unexpected bedtools output line: #{line}"
    end
    previous_feature = feat
  end
  feature_to_covs[previous_feature] = calculate_cov.call(covs, num_covs)

  feature_to_covs
end

# Remove the ##FASTA and afterwards from the GFF file as this makes bedtools <2.25 fail
# https://github.com/arq5x/bedtools2/issues/235#issuecomment-103776618
no_fasta_gff = Tempfile.new(['dirseq','.gff3'])
Bio::Commandeer.run "sed '/^##FASTA$/,$d' #{gff_file.inspect} > #{no_fasta_gff.path}", :log => log
gff_file = no_fasta_gff.path





# Find featureless contigs. Need to so that bedtools coverage -sorted does not complain
if not File.exists?("#{bam_file}.bai")
  raise "Input bam file must be indexed, but the index file does not exist"
end

chromosome_file = Tempfile.new('bam_contigs')
log.info "Listing contigs in sorted order .."
cmd = "samtools idxstats #{bam_file.inspect} |cut -f1,2 |grep -v '^*' >#{chromosome_file.path.inspect}"
Bio::Commandeer.run(cmd, :log => log)

log.info "Finding featureless contigs"
cmd = "grep -v '^#' #{gff_file.inspect} |cut -f1 |sort |uniq |grep -vFw -f /dev/stdin #{chromosome_file.path.inspect} |cut -f1"
featureless_contigs = Bio::Commandeer.run(cmd, :log => log).lines.map(&:chomp).reject{ |ref| ref=='*' }
log.info "Found #{featureless_contigs.length} featureless contigs"

# Sort the GFF
dummy_features = featureless_contigs.collect do |ref|
  [ref,
   'dirseq',
   'misc_RNA',
   '1',
   '2',
   '.',
   '+',
   '0',
   "ID=#{ref}_dummy_feature"].join("\t")
end
sorted_gff_file_f = Tempfile.new(['sorted_gff','.gff3'])
sorted_gff_file = sorted_gff_file_f.path
Tempfile.open(["extra_features",'.gff']) do |ef|
  ef.puts dummy_features.join("\n")
  ef.close

  cmd = "cat #{ef.path} #{gff_file.inspect} |bedtools sort -i /dev/stdin -faidx #{chromosome_file.path.inspect} >#{sorted_gff_file.inspect}"
  log.info "Running bedtools sort"
  Bio::Commandeer.run(cmd, :log => log)
end



covs_fwd = nil
if options[:ignore_directions]
  cmd1 = "samtools view -u #{options[:sam_filter_flags]} #{bam_file.inspect} |bedtools coverage -b /dev/stdin -a #{gff_file.inspect} -hist"
  cov_lines_fwd = Bio::Commandeer.run cmd1, :log => log
  log.info "Parsing coverage profiles"
  covs_fwd = get_covs.call(cov_lines_fwd)

else
  # fwd read 1
  read1_flag = '-F128' #account for read1 in pair, as well as single reads mapping
  read2_flag = '-f128'
  bedtools_type_flag = '-hist'
  if options[:count_type] == COUNT_COUNT_TYPE
    bedtools_type_flag = '-counts'
  end
  cmdf1 = "samtools view #{options[:sam_filter_flags]} -u #{read1_flag} #{bam_file.inspect} |bedtools coverage -sorted -g #{chromosome_file.path.inspect} -b /dev/stdin -a #{sorted_gff_file.inspect} -s #{bedtools_type_flag}"
  cmdf2 = "samtools view #{options[:sam_filter_flags]} -u #{read2_flag} #{bam_file.inspect} |bedtools coverage -sorted -g #{chromosome_file.path.inspect} -b /dev/stdin -a #{sorted_gff_file.inspect} -s #{bedtools_type_flag}"
  cmdr1 = "samtools view #{options[:sam_filter_flags]} -u #{read1_flag} #{bam_file.inspect} |bedtools coverage -sorted -g #{chromosome_file.path.inspect} -b /dev/stdin -a #{sorted_gff_file.inspect} -S #{bedtools_type_flag}"
  cmdr2 = "samtools view #{options[:sam_filter_flags]} -u #{read2_flag} #{bam_file.inspect} |bedtools coverage -sorted -g #{chromosome_file.path.inspect} -b /dev/stdin -a #{sorted_gff_file.inspect} -S #{bedtools_type_flag}"

  command_to_parsed = lambda do |cmds, name|
    covs_lines_initial = cmds.collect do |cmd|
      Bio::Commandeer.run cmd, :log => log
    end
    covs_initial = covs_lines_initial.collect do |lines|
      log.info "Parsing #{name}"
      get_covs.call(lines)
    end
    covs = covs_initial[0]
    if covs_initial.length > 1
      covs_initial[1].each do |cov_key, cov|
        covs[cov_key] += cov
      end
    end
    covs #'return' from lambda
  end

  # Agreeing reads (those whose template are fwd along the reference sequence) are either first and fwd, or second and rev
  commands_fwd = [cmdf1,cmdr2]
  commands_rev = [cmdf2,cmdr1]
  if options[:forward_ready_only]
    commands_fwd = [cmdf1]
    commands_rev = [cmdr1]
  end
  covs_fwd = command_to_parsed.call(commands_fwd, 'reads with same direction as their reference')
  covs_rev = command_to_parsed.call(commands_rev, 'reads with opposing direction as their reference')
end

headers = [
  'contig',
  'type',
  'start',
  'end',
  'strand',
]
if options[:ignore_directions]
  headers.push 'average_coverage'
elsif options[:count_type] == COVERAGE_COUNT_TYPE
  headers.push 'forward_average_coverage'
  headers.push 'reverse_average_coverage'
elsif options[:count_type] == COUNT_COUNT_TYPE
  headers.push 'forward_read_count'
  headers.push 'reverse_read_count'
else
  raise
end
headers.push 'annotation'
options[:comment_fields_to_print].each do |field|
  headers.push field
end
puts headers.join("\t")

covs_fwd.each do |feature, cov_fwd|
  cov_rev = covs_rev[feature] unless options[:ignore_directions]
  record = Bio::GFF::GFF3::Record.new(feature.join("\t"))

  products = record.attributes.select{|a| a[0] == 'product'}
  product = 'unannotated'
  if products.length == 1
    product = products[0][1]
  end

  to_print = [
    record.seqname,
    record.feature,
    record.start,
    record.end,
    record.strand,
    cov_fwd,
  ]
  to_print.push cov_rev unless options[:ignore_directions]
  to_print.push product
  options[:comment_fields_to_print].each do |field|
    answer1 = record.attributes.select{|a| a[0] == field}
    if answer1.empty?
      to_print.push ''
    else
      to_print.push answer1[0][1]
    end
  end
  puts to_print.join("\t")
end
